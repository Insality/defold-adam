local adam = require("adam.adam")
local actions = require("adam.actions")

function init(self)

	local idle = adam.state(
		actions.math.set("speed", 5),
		actions.input.get_axis_keys("key_a", "key_d", "hor_move", true, actions.value("speed")),
		actions.input.get_axis_keys("key_s", "key_w", "ver_move", true, actions.value("speed")),
		actions.vmath.set_xyz("move_vector", actions.value("hor_move"), actions.value("ver_move"), nil, true),
		actions.transform.translate(actions.value("move_vector"), true)
	)

	local consume = adam.state(
		actions.math.set("speed", 3),

		actions.input.get_axis_keys("key_a", "key_d", "hor_move", true, actions.value("speed")),
		actions.input.get_axis_keys("key_s", "key_w", "ver_move", true, actions.value("speed")),
		actions.vmath.set_xyz("move_vector", actions.value("hor_move"), actions.value("ver_move"), nil, true),
		actions.transform.translate(actions.value("move_vector"), true),

		actions.transform.set_scale(vmath.vector3(1.1), nil, 0.25),
		actions.transform.set_scale(vmath.vector3(1), nil, 0.25, nil, 0.25),
		actions.time.delay(0.5, adam.FINISHED)
	)

	self.adam = adam.new(idle,
		{
			{idle, consume, actions.EVENT.TRIGGER_ENTER},
			{consume, idle}
		},
		{
			speed = 5,
			hor_move = 0,
			ver_move = 0,
			move_vector = vmath.vector3(0)
		}
	):start()

	msg.post(".", "acquire_input_focus")
end


function final(self)
	msg.post(".", "release_input_focus")
	self.adam:final()
end


function update(self, dt)
	self.adam:update(dt)
end


function on_input(self, action_id, action)
	self.adam:on_input(action_id, action)
end


function on_message(self, message_id, message, sender)
	self.adam:on_message(message_id, message, sender)
end

local adam = require("adam.adam")
local actions = require("adam.actions")


local function flip_comparator(current_value, speed)
	if speed == 0 then
		return current_value
	end
	return speed < 0
end


function init(self)
	local wasd_control = adam.actions(
		actions.input.get_axis_actions("key_a", "key_d", actions.value("move_vector", "x"), true, 5),
		actions.input.get_axis_actions("key_s", "key_w", actions.value("move_vector", "y"), true, 3),
		actions.vmath.length("move_vector", "move_speed", true),
		actions.vmath.add("position", actions.value("move_vector"), true),
		actions.math.clamp(actions.value("position", "x"), 16, 960-16, true),
		actions.math.clamp(actions.value("position", "y"), 16, 640-64, true),

		actions.math.set("z_pos", actions.value("position", "y"), true),
		actions.math.divide("z_pos", -1000, true),
		actions.math.add("z_pos", 0.5, true),
		actions.math.set(actions.value("position", "z"), actions.value("z_pos"), true),

		actions.transform.set_position(actions.value("position"), true)
	)

	local idle = adam.state(
		wasd_control,
		actions.logic.compare(actions.value("move_speed"), 0, nil, "move", "move", true),
		actions.sprite.play_flipbook("player_idle")
	)

	local move = adam.state(
		wasd_control,
		actions.math.operator("is_flip", actions.value("move_vector", "x"), flip_comparator, true),
		actions.logic.compare(actions.value("move_speed"), 0, "idle", nil, nil, true),
		actions.sprite.set_hflip(actions.value("is_flip"), nil, true),
		actions.sprite.play_flipbook("player_run")
	)

	self.adam = adam.new(idle,
		{
			{idle, move, "move"},
			{move, idle, "idle"},
		},
		{
			move_speed = 0,
			z_pos = 0,
			move_vector = vmath.vector3(0),
			position = go.get_position(),
			is_flip = false,
		}
	):start()

	msg.post(".", "acquire_input_focus")
end

function final(self)
	self.adam:final()

	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.adam:update(dt)
end

function on_message(self, message_id, message, sender)
	self.adam:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.adam:on_input(action_id, action)
end

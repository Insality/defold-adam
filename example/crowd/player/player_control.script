local adam = require("adam.adam")
local actions = require("adam.actions")
local entity_adam = require("example.crowd.entity_adam")


function init(self)
	local get_move_vector = adam.actions(
		actions.input.get_axis_actions("key_a", "key_d", actions.value("move_vector", "x"), true, 1),
		actions.input.get_axis_actions("key_s", "key_w", actions.value("move_vector", "y"), true, 1),
		actions.vmath.normalize("move_vector", true),
		actions.vmath.multiply("move_vector", actions.value("speed"), true),
		actions.vmath.length(actions.value("move_vector"), "move_speed", true)
	)

	local idle = adam.state(
		get_move_vector,
		entity_adam.on_idle,
		actions.logic.compare(actions.value("move_speed"), 0, nil, "move", "move", true)
	)

	local move = adam.state(
		get_move_vector,
		entity_adam.on_move_entity,
		actions.logic.compare(actions.value("move_speed"), 0, "idle", nil, nil, true)
	)

	self.adam = adam.new(entity_adam.initial,
		{
			{entity_adam.initial, idle},

			{idle, move, "move"},
			{move, idle, "idle"},
		},
		{
			speed = 5,
			z_pos = 0,
			move_speed = 0,
			is_flip = false,
			position = vmath.vector3(0),
			move_vector = vmath.vector3(0),
			anim_idle = "player_idle",
			anim_run = "player_run"
		}
	)

	self.adam:set_id("player")
	self.adam:start()

	msg.post(".", "acquire_input_focus")
end

function final(self)
	self.adam:final()

	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.adam:update(dt)
end

function on_message(self, message_id, message, sender)
	self.adam:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.adam:on_input(action_id, action)
end

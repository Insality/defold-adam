local adam = require("adam.adam")
local actions = require("adam.actions")
local projectile = require("example.space_shooter.entities.projectile.projectile")

function init(self)
	self.adams = {}

	local shoot = adam.state(
		actions.msg.post(".", "create_projectile"),
		actions.math.random("euler_diff", -30, 30),
		actions.math.add("euler_diff", actions.value("start_euler_z")),
		actions.vmath.set_xyz("current_euler", nil, nil, actions.value("euler_diff")),
		actions.transform.animate_euler(actions.value("current_euler"), 0.4)
	):set_name("shoot")

	local damage = adam.state(
		actions.transform.set_scale(vmath.vector3(1)),
		actions.transform.animate_scale_by(vmath.vector3(0.1), 0.08),
		actions.transform.animate_scale_by(vmath.vector3(-0.1), 0.08, nil, 0.08),
		actions.math.substract("health", 1),
		actions.logic.compare(actions.value("health"), 1, nil, "death")
	)

	local initial = adam.state(
		actions.transform.get_euler("current_euler"),
		actions.vmath.get_xyz("current_euler", nil, nil, "start_euler_z")
	):set_name("initial")

	local death = adam.state(
		actions.transform.animate_scale(vmath.vector3(0), 0.5),
		actions.go.delete_self(0.5)
	)

	local idle = adam.state(
		actions.time.random_delay(0.1, 0.3, "shoot")
	):set_name("idle")

	self.adam = adam.new(initial,
		{
			{initial, idle},
			{idle, shoot, "shoot"},
			{shoot, idle},
			{idle, damage, actions.EVENT.TRIGGER_ENTER},
			{shoot, damage, actions.EVENT.TRIGGER_ENTER},
			{damage, damage, actions.EVENT.TRIGGER_ENTER},
			{damage, idle},
			{damage, death, "death"},
		},
		{
			health = 10,
			current_euler = vmath.vector3(0),
			start_euler_z = 0,
			euler_diff = 0,
		}):start()

	table.insert(self.adams, self.adam)
end


function final(self)
	for _, adam_instance in ipairs(self.adams) do
		adam_instance:final()
	end
end


function update(self, dt)
	for _, adam_instance in ipairs(self.adams) do
		adam_instance:update(dt)
	end

	for i = #self.adams, 1, -1 do
		if not self.adams[i]:is_active() then
			table.remove(self.adams, i)
		end
	end
end


local function create_projectile(self)
	-- Example how to not spawn script for every FSM
	local pos = go.get_world_position(go.get_id("spawn_pos"))
	local projectile_id = factory.create("#projectiles", pos)
	sprite.play_flipbook(msg.url(nil, projectile_id, "sprite"), "laser_enemy")
	local projectile_adam = projectile.create(projectile_id)
	projectile_adam:start()
	table.insert(self.adams, projectile_adam)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("create_projectile") then
		create_projectile(self)
	end

	for _, adam_instance in ipairs(self.adams) do
		adam_instance:on_message(message_id, message, sender)
	end
end

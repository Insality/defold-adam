local adam = require("adam.adam")
local actions = require("adam.actions")
local projectile = require("example.space_shooter.entities.projectile.projectile")

function init(self)
	self.player_id = go.get_id("/player")

	local shoot = adam.state(
		actions.math.random("euler_diff", -30, 30),
		actions.math.add("euler_diff", actions.value("move_euler", "z")),
		actions.transform.get_position("player_pos", nil, "/player/player"),
		actions.vmath.get_euler(actions.value("position"), actions.value("player_pos"), actions.value("current_euler", "z")),
		actions.math.add(actions.value("current_euler", "z"), -90),
		actions.transform.animate_euler(actions.value("current_euler"), 0.4),
		actions.msg.post(".", "create_projectile", nil, 0.4),
		actions.msg.post(".", "create_projectile", nil, 0.5),
		actions.msg.post(".", "create_projectile", nil, 0.7)
	):set_name("shoot")

	local initial = adam.state(
		actions.transform.get_euler("current_euler"),
		actions.transform.get_position("position"),
		actions.vmath.get_xyz("current_euler", nil, nil, "start_euler_z")
	):set_name("initial")

	local idle = adam.state(
		actions.time.random_delay(0.1, 0.3, "move")
	):set_name("idle")

	local move = adam.state(
		actions.transform.get_position("current_position"),
		actions.math.random(actions.value("position", "x"), 200, 760),
		actions.math.random(actions.value("position", "y"), 300, 500),
		actions.vmath.get_euler(actions.value("current_position"), actions.value("position"), actions.value("move_euler", "z")),
		actions.math.add(actions.value("move_euler", "z"), -90),
		actions.transform.animate_euler(actions.value("move_euler"), 0.5),
		actions.transform.animate_position(actions.value("position"), 1, "shoot", nil, go.EASING_INSINE)
	)

	self.adam = adam.new(initial,
		{
			{initial, idle},
			{idle, shoot, "shoot"},
			{idle, move, "move"},
			{move, shoot, "shoot"},
			{shoot, idle}
		},
		{
			player_pos = vmath.vector3(0),
			current_position = vmath.vector3(0),
			current_euler = vmath.vector3(0),
			start_euler_z = 0,
			test = vmath.vector3(),
			euler_diff = 0,
			move_euler = vmath.vector3(0),
			position = vmath.vector3(0),
		}):start():set_name("enemy")


	local health_idle = adam.state()

	local death = adam.state(
		actions.sprite.set_alpha(1, nil, 0.1),
		actions.transform.animate_scale(vmath.vector3(0), 0.5),
		actions.go.disable("#collisionobject"),
		actions.fsm.broadcast_event("spawn_enemy", true, 0.5),
		actions.go.delete_self(0.5),
		actions.fsm.finish(self.adam, 0.5)
	)

	local check_damage = adam.state(
		actions.physics.get_trigger_info("other_group"),
		actions.logic.equals(actions.value("other_group"), hash("projectile"), "damage")
	)

	local damage = adam.state(
		actions.transform.set_scale(vmath.vector3(1)),
		actions.transform.animate_scale_by(vmath.vector3(0.1), 0.08),
		actions.transform.animate_scale_by(vmath.vector3(-0.1), 0.08, nil, 0.08),
		actions.sprite.set_alpha(10),
		actions.sprite.animate_alpha(1, 0.05),
		actions.math.substract("health", 1),
		actions.logic.compare(actions.value("health"), 1, nil, "death")
	)

	local health_adam = adam.new(health_idle, {
		{health_idle, check_damage, actions.EVENT.TRIGGER_ENTER},
		{check_damage, health_idle},
		{check_damage, damage, "damage"},
		{damage, health_idle},
		{damage, death, "death"},
		{damage, check_damage, actions.EVENT.TRIGGER_ENTER},
	}, {
		health = 10,
		other_group = ""
	}):start():set_name("heatlh")

	self.adam:add(health_adam)
	self.adam:forward_events(health_adam, actions.EVENT.TRIGGER_ENTER, true)
end


function final(self)
	self.adam:final()
end


function update(self, dt)
	self.adam:update(dt)
end


local function create_projectile(self)
	-- Example how to not spawn script for every FSM
	local pos = go.get_world_position(go.get_id("spawn_pos"))
	local projectile_id = factory.create("#projectiles", pos)
	sprite.play_flipbook(msg.url(nil, projectile_id, "sprite"), "laser_enemy")
	local projectile_adam = projectile.create(projectile_id, "laser_enemy_impact", go.get_id())
	projectile_adam:bind(projectile_id)
	projectile_adam:start()
	self.adam:add(projectile_adam)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("create_projectile") then
		create_projectile(self)
	end

	self.adam:on_message(message_id, message, sender)
end

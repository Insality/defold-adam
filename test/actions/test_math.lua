local adam = require("adam.adam")
local actions = require("adam.actions")

return function()
	describe("Math actions", function()
		local adam_instance, state_instance
		before(function()
			state_instance = adam.state()
			adam_instance = adam.new(state_instance, {}, { value = 0, a = 5, b = 2, c = -3 })
		end)

		after(function()
			adam_instance:final()
		end)

		test("Action Math Add", function()
			local math_action = actions.math.add("value", 1)
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(1, adam_instance:get_value("value"))
			math_action:trigger()
			assert_equal(2, adam_instance:get_value("value"))
		end)

		test("Action Math Set", function()
			local math_action = actions.math.set("value", 5)
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(5, adam_instance:get_value("value"))
			math_action:trigger()
			assert_equal(5, adam_instance:get_value("value"))
		end)

		test("Action Math Substract", function()
			local math_action = actions.math.substract("value", 5)
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(-5, adam_instance:get_value("value"))
			math_action:trigger()
			assert_equal(-10, adam_instance:get_value("value"))
		end)

		test("Action Math Multiply", function()
			local math_action = actions.math.multiply("value", 5)
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(0, adam_instance:get_value("value"))
			math_action:trigger()
			assert_equal(0, adam_instance:get_value("value"))

			local math_action_2 = actions.math.multiply("b", actions.value("a"))
			math_action_2:set_state_instance(state_instance)
			math_action_2:trigger()
			assert_equal(10, adam_instance:get_value("b"))
			math_action_2:trigger()
			assert_equal(50, adam_instance:get_value("b"))
			assert_equal(5, adam_instance:get_value("a"))
		end)

		test("Action Math Divide", function()
			local math_action = actions.math.divide("a", actions.value("b"))
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(2.5, adam_instance:get_value("a"))
			math_action:trigger()
			assert_equal(1.25, adam_instance:get_value("a"))
		end)

		test("Action Math Clamp", function()
			local math_action = actions.math.clamp("a", 1, 3)
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(3, adam_instance:get_value("a"))

			local math_action_2 = actions.math.clamp("a", 10, 100)
			math_action_2:set_state_instance(state_instance)
			math_action_2:trigger()
			assert_equal(10, adam_instance:get_value("a"))
		end)

		test("Action Math Abs", function()
			local math_action = actions.math.abs("c")
			math_action:set_state_instance(state_instance)
			math_action:trigger()
			assert_equal(3, adam_instance:get_value("c"))
			math_action:trigger()
			assert_equal(3, adam_instance:get_value("c"))
		end)
	end)
end
